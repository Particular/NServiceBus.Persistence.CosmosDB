[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.LogicalOutbox.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.NonTransactionalSagas.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.PersistenceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.PessimisticLock.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.PhysicalOutbox.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public readonly struct ContainerInformation
    {
        public ContainerInformation(string containerName, NServiceBus.PartitionKeyPath partitionKeyPath) { }
        public string ContainerName { get; }
        public NServiceBus.PartitionKeyPath PartitionKeyPath { get; }
    }
    public static class CosmosOutboxSettingsExtensions
    {
        public static void TimeToKeepOutboxDeduplicationData(this NServiceBus.Outbox.OutboxSettings outboxSettings, System.TimeSpan timeToKeepOutboxDeduplicationData) { }
    }
    public class CosmosPersistence : NServiceBus.Persistence.PersistenceDefinition { }
    public static class CosmosPersistenceConfig
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> CosmosClient(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions, Microsoft.Azure.Cosmos.CosmosClient cosmosClient) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> DatabaseName(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions, string databaseName) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> DefaultContainer(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions, string containerName, string partitionKeyPath) { }
        public static void DisableContainerCreation(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions) { }
        [System.Obsolete("Use persistence.Sagas().EnableMigrationMode() instead. Will be removed in version" +
            " 3.0.0.", true)]
        public static void EnableMigrationMode(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions) { }
        public static NServiceBus.Persistence.CosmosDB.SagaPersistenceConfiguration Sagas(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions) { }
    }
    public interface ICosmosStorageSession
    {
        Microsoft.Azure.Cosmos.TransactionalBatch Batch { get; }
        Microsoft.Azure.Cosmos.Container Container { get; }
        Microsoft.Azure.Cosmos.PartitionKey PartitionKey { get; }
        NServiceBus.PartitionKeyPath PartitionKeyPath { get; }
    }
    public readonly struct PartitionKeyPath
    {
        public PartitionKeyPath(string partitionKeyPath) { }
        public bool Equals(NServiceBus.PartitionKeyPath other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static string op_Implicit(NServiceBus.PartitionKeyPath path) { }
        public static bool operator !=(NServiceBus.PartitionKeyPath left, NServiceBus.PartitionKeyPath right) { }
        public static bool operator ==(NServiceBus.PartitionKeyPath left, NServiceBus.PartitionKeyPath right) { }
    }
    public static class SynchronizedStorageSessionExtensions
    {
        public static NServiceBus.ICosmosStorageSession CosmosPersistenceSession(this NServiceBus.Persistence.ISynchronizedStorageSession session) { }
    }
}
namespace NServiceBus.Persistence.CosmosDB
{
    public interface IProvideCosmosClient
    {
        Microsoft.Azure.Cosmos.CosmosClient Client { get; }
    }
    public sealed class LogicalOutboxBehavior : NServiceBus.Pipeline.IBehavior, NServiceBus.Pipeline.IBehavior<NServiceBus.Pipeline.IIncomingLogicalMessageContext, NServiceBus.Pipeline.IIncomingLogicalMessageContext>
    {
        public System.Threading.Tasks.Task Invoke(NServiceBus.Pipeline.IIncomingLogicalMessageContext context, System.Func<NServiceBus.Pipeline.IIncomingLogicalMessageContext, System.Threading.Tasks.Task> next) { }
    }
    public class PessimisticLockingConfiguration
    {
        public PessimisticLockingConfiguration() { }
        public void SetPessimisticLeaseLockAcquisitionMaximumRefreshDelay(System.TimeSpan value) { }
        public void SetPessimisticLeaseLockAcquisitionMinimumRefreshDelay(System.TimeSpan value) { }
        public void SetPessimisticLeaseLockAcquisitionTimeout(System.TimeSpan value) { }
        public void SetPessimisticLeaseLockTime(System.TimeSpan value) { }
    }
    public class SagaPersistenceConfiguration
    {
        public SagaPersistenceConfiguration() { }
        public void EnableMigrationMode() { }
        public NServiceBus.Persistence.CosmosDB.PessimisticLockingConfiguration UsePessimisticLocking() { }
    }
    public sealed class TransactionalBatchOperationException : System.Exception
    {
        public TransactionalBatchOperationException(Microsoft.Azure.Cosmos.TransactionalBatchOperationResult result) { }
        public TransactionalBatchOperationException(string message, Microsoft.Azure.Cosmos.TransactionalBatchOperationResult result) { }
        public Microsoft.Azure.Cosmos.TransactionalBatchOperationResult Result { get; }
    }
}
namespace NServiceBus.Testing
{
    public class TestableCosmosSynchronizedStorageSession : NServiceBus.Persistence.ISynchronizedStorageSession
    {
        public TestableCosmosSynchronizedStorageSession(Microsoft.Azure.Cosmos.PartitionKey partitionKey) { }
        public Microsoft.Azure.Cosmos.Container Container { get; set; }
        public NServiceBus.PartitionKeyPath PartitionKeyPath { get; set; }
        public Microsoft.Azure.Cosmos.TransactionalBatch TransactionalBatch { get; set; }
    }
}