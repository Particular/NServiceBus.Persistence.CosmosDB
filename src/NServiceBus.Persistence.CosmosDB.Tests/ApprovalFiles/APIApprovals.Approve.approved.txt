[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.LogicalOutbox.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.NonTransactionalSagas.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.PersistenceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.PessimisticLock.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.PhysicalOutbox.AcceptanceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Persistence.CosmosDB.TransactionalSession, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
namespace NServiceBus
{
    public readonly struct ContainerInformation
    {
        public ContainerInformation(string containerName, NServiceBus.PartitionKeyPath partitionKeyPath) { }
        public string ContainerName { get; }
        public NServiceBus.PartitionKeyPath PartitionKeyPath { get; }
    }
    public static class CosmosOutboxSettingsExtensions
    {
        public static void TimeToKeepOutboxDeduplicationData(this NServiceBus.Outbox.OutboxSettings outboxSettings, System.TimeSpan timeToKeepOutboxDeduplicationData) { }
    }
    public class CosmosPersistence : NServiceBus.Persistence.PersistenceDefinition { }
    public static class CosmosPersistenceConfig
    {
        public static NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> CosmosClient(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions, Microsoft.Azure.Cosmos.CosmosClient cosmosClient) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> DatabaseName(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions, string databaseName) { }
        public static NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> DefaultContainer(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions, string containerName, string partitionKeyPath) { }
        public static void DisableContainerCreation(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions) { }
        [System.Obsolete("Use persistence.Sagas().EnableMigrationMode() instead. Will be treated as an erro" +
            "r from version 2.0.0. Will be removed in version 3.0.0.", false)]
        public static void EnableMigrationMode(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions) { }
        public static NServiceBus.Persistence.CosmosDB.SagaPersistenceConfiguration Sagas(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions) { }
        public static NServiceBus.Persistence.CosmosDB.TransactionInformationConfiguration TransactionInformation(this NServiceBus.PersistenceExtensions<NServiceBus.CosmosPersistence> persistenceExtensions) { }
    }
    public interface ICosmosStorageSession
    {
        Microsoft.Azure.Cosmos.TransactionalBatch Batch { get; }
        Microsoft.Azure.Cosmos.Container Container { get; }
        Microsoft.Azure.Cosmos.PartitionKey PartitionKey { get; }
        NServiceBus.PartitionKeyPath PartitionKeyPath { get; }
    }
    public readonly struct PartitionKeyPath
    {
        public PartitionKeyPath(string partitionKeyPath) { }
        public bool Equals(NServiceBus.PartitionKeyPath other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static string op_Implicit(NServiceBus.PartitionKeyPath path) { }
        public static bool operator !=(NServiceBus.PartitionKeyPath left, NServiceBus.PartitionKeyPath right) { }
        public static bool operator ==(NServiceBus.PartitionKeyPath left, NServiceBus.PartitionKeyPath right) { }
    }
    public static class SynchronizedStorageSessionExtensions
    {
        public static NServiceBus.ICosmosStorageSession CosmosPersistenceSession(this NServiceBus.Persistence.SynchronizedStorageSession session) { }
    }
}
namespace NServiceBus.Persistence.CosmosDB
{
    public interface IContainerInformationFromHeadersExtractor
    {
        bool TryExtract(System.Collections.Generic.IReadOnlyDictionary<string, string> headers, out NServiceBus.ContainerInformation? containerInformation);
    }
    public interface IContainerInformationFromMessagesExtractor
    {
        bool TryExtract(object message, System.Collections.Generic.IReadOnlyDictionary<string, string> headers, out NServiceBus.ContainerInformation? containerInformation);
    }
    public interface IPartitionKeyFromHeadersExtractor
    {
        bool TryExtract(System.Collections.Generic.IReadOnlyDictionary<string, string> headers, out Microsoft.Azure.Cosmos.PartitionKey? partitionKey);
    }
    public interface IPartitionKeyFromMessageExtractor
    {
        bool TryExtract(object message, System.Collections.Generic.IReadOnlyDictionary<string, string> headers, out Microsoft.Azure.Cosmos.PartitionKey? partitionKey);
    }
    public interface IProvideCosmosClient
    {
        Microsoft.Azure.Cosmos.CosmosClient Client { get; }
    }
    [System.Obsolete(@"This class was only ever used as a constant to place custom behaviors in the right part of the pipeline. It is no longer necessary to have a custom behavior to extract the transaction information. Use `persistence.TransactionInformation()` to conveniently map headers or message content to partition keys. Will be treated as an error from version 2.0.0. Will be removed in version 3.0.0.", false)]
    public sealed class LogicalOutboxBehavior : NServiceBus.Pipeline.IBehavior, NServiceBus.Pipeline.IBehavior<NServiceBus.Pipeline.IIncomingLogicalMessageContext, NServiceBus.Pipeline.IIncomingLogicalMessageContext>
    {
        public System.Threading.Tasks.Task Invoke(NServiceBus.Pipeline.IIncomingLogicalMessageContext context, System.Func<NServiceBus.Pipeline.IIncomingLogicalMessageContext, System.Threading.Tasks.Task> next) { }
    }
    public class PessimisticLockingConfiguration
    {
        public PessimisticLockingConfiguration() { }
        public void SetLeaseLockAcquisitionMaximumRefreshDelay(System.TimeSpan value) { }
        public void SetLeaseLockAcquisitionMinimumRefreshDelay(System.TimeSpan value) { }
        public void SetLeaseLockAcquisitionTimeout(System.TimeSpan value) { }
        public void SetLeaseLockTime(System.TimeSpan value) { }
    }
    public class SagaPersistenceConfiguration
    {
        public SagaPersistenceConfiguration() { }
        public void EnableMigrationMode() { }
        public NServiceBus.Persistence.CosmosDB.PessimisticLockingConfiguration UsePessimisticLocking() { }
    }
    public class TransactionInformationConfiguration
    {
        public TransactionInformationConfiguration() { }
        public void ExtractContainerInformationFromHeader(string headerKey, NServiceBus.ContainerInformation containerInformation) { }
        public void ExtractContainerInformationFromHeader(string headerKey, System.Func<string, NServiceBus.ContainerInformation> extractor) { }
        public void ExtractContainerInformationFromHeader<TArg>(string headerKey, System.Func<string, TArg, NServiceBus.ContainerInformation> extractor, TArg extractorArgument) { }
        public void ExtractContainerInformationFromHeaders(NServiceBus.Persistence.CosmosDB.IContainerInformationFromHeadersExtractor extractor) { }
        public void ExtractContainerInformationFromHeaders(System.Func<System.Collections.Generic.IReadOnlyDictionary<string, string>, NServiceBus.ContainerInformation?> extractor) { }
        public void ExtractContainerInformationFromHeaders<TArg>(System.Func<System.Collections.Generic.IReadOnlyDictionary<string, string>, TArg, NServiceBus.ContainerInformation?> extractor, TArg extractorArgument) { }
        public void ExtractContainerInformationFromMessage(NServiceBus.Persistence.CosmosDB.IContainerInformationFromMessagesExtractor extractor) { }
        public void ExtractContainerInformationFromMessage<TMessage>(NServiceBus.ContainerInformation containerInformation) { }
        public void ExtractContainerInformationFromMessage<TMessage>(System.Func<TMessage, NServiceBus.ContainerInformation> extractor) { }
        public void ExtractContainerInformationFromMessage<TMessage>(System.Func<TMessage, System.Collections.Generic.IReadOnlyDictionary<string, string>, NServiceBus.ContainerInformation> extractor) { }
        public void ExtractContainerInformationFromMessage<TMessage, TArg>(System.Func<TMessage, TArg, NServiceBus.ContainerInformation> extractor, TArg extractorArgument) { }
        public void ExtractContainerInformationFromMessage<TMessage, TArg>(System.Func<TMessage, System.Collections.Generic.IReadOnlyDictionary<string, string>, TArg, NServiceBus.ContainerInformation> extractor, TArg extractorArgument) { }
        public void ExtractPartitionKeyFromHeader(string headerKey) { }
        public void ExtractPartitionKeyFromHeader(string headerKey, System.Func<string, Microsoft.Azure.Cosmos.PartitionKey> extractor) { }
        public void ExtractPartitionKeyFromHeader(string headerKey, System.Func<string, string> extractor) { }
        public void ExtractPartitionKeyFromHeader<TArg>(string headerKey, System.Func<string, TArg, Microsoft.Azure.Cosmos.PartitionKey> extractor, TArg extractorArgument) { }
        public void ExtractPartitionKeyFromHeader<TArg>(string headerKey, System.Func<string, TArg, string> extractor, TArg extractorArgument) { }
        public void ExtractPartitionKeyFromHeaders(NServiceBus.Persistence.CosmosDB.IPartitionKeyFromHeadersExtractor extractor) { }
        public void ExtractPartitionKeyFromHeaders(System.Func<System.Collections.Generic.IReadOnlyDictionary<string, string>, Microsoft.Azure.Cosmos.PartitionKey?> extractor) { }
        public void ExtractPartitionKeyFromHeaders<TArg>(System.Func<System.Collections.Generic.IReadOnlyDictionary<string, string>, TArg, Microsoft.Azure.Cosmos.PartitionKey?> extractor, TArg extractorArgument) { }
        public void ExtractPartitionKeyFromMessage<TMessage>(System.Func<TMessage, Microsoft.Azure.Cosmos.PartitionKey> extractor) { }
        public void ExtractPartitionKeyFromMessage<TMessage>(System.Func<TMessage, System.Collections.Generic.IReadOnlyDictionary<string, string>, Microsoft.Azure.Cosmos.PartitionKey> extractor) { }
        public void ExtractPartitionKeyFromMessage<TMessage, TArg>(System.Func<TMessage, TArg, Microsoft.Azure.Cosmos.PartitionKey> extractor, TArg extractorArgument) { }
        public void ExtractPartitionKeyFromMessage<TMessage, TArg>(System.Func<TMessage, System.Collections.Generic.IReadOnlyDictionary<string, string>, TArg, Microsoft.Azure.Cosmos.PartitionKey> extractor, TArg extractorArgument) { }
        public void ExtractPartitionKeyFromMessages(NServiceBus.Persistence.CosmosDB.IPartitionKeyFromMessageExtractor extractor) { }
    }
    public sealed class TransactionalBatchOperationException : System.Exception
    {
        public TransactionalBatchOperationException(Microsoft.Azure.Cosmos.TransactionalBatchOperationResult result) { }
        public TransactionalBatchOperationException(string message, Microsoft.Azure.Cosmos.TransactionalBatchOperationResult result) { }
        public Microsoft.Azure.Cosmos.TransactionalBatchOperationResult Result { get; }
    }
}
namespace NServiceBus.Testing
{
    public class TestableCosmosSynchronizedStorageSession : NServiceBus.Persistence.SynchronizedStorageSession
    {
        public TestableCosmosSynchronizedStorageSession(Microsoft.Azure.Cosmos.PartitionKey partitionKey) { }
        public Microsoft.Azure.Cosmos.Container Container { get; set; }
        public NServiceBus.PartitionKeyPath PartitionKeyPath { get; set; }
        public Microsoft.Azure.Cosmos.TransactionalBatch TransactionalBatch { get; set; }
    }
}