namespace NServiceBus.Persistence.CosmosDB.SourceGenerator
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.CodeAnalysis.Text;

    public sealed partial class PartitionKeyMappingSourceGenerator
    {
        sealed class Emitter
        {
            readonly SourceGenerationSpec generationSpec;
            readonly PartitionKeyMapperSourceGenerationContext sourceGenerationContext;

            public Emitter(SourceGenerationSpec generationSpec, in PartitionKeyMapperSourceGenerationContext sourceGenerationContext)
            {
                this.generationSpec = generationSpec;
                this.sourceGenerationContext = sourceGenerationContext;
            }

            public void Emit()
            {
                string @namespace = generationSpec.ContextTypeSymbol.ContainingNamespace.Name;
                string contextName = generationSpec.ContextTypeSymbol.Name;
                string classDeclaration = generationSpec.ClassDeclaration!;

                StringBuilder sb = new(@"// <auto-generated/>
#nullable enable");

                sb.Append(@$"
namespace {@namespace}
{{");
                string declarationSource = $@"
{classDeclaration}
{{";
                sb.Append($@"
{IndentSource(declarationSource, numIndentations: 1)}
");

                // TODO Fix
                sb.AppendLine("}");
                sb.AppendLine("}");
                sourceGenerationContext.AddSource($"{contextName}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
            }

            static string IndentSource(string source, int numIndentations) => source.Replace(Environment.NewLine, $"{Environment.NewLine}{new string(' ', 4 * numIndentations)}"); // 4 spaces per indentation.
        }
    }
}