namespace NServiceBus.Persistence.CosmosDB.SourceGenerator
{
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.CodeAnalysis.Text;

    public sealed partial class PartitionKeyExtractorSourceGenerator
    {
        sealed class Emitter
        {
            readonly SourceGenerationSpec generationSpec;
            readonly PartitionKeyMapperSourceGenerationContext sourceGenerationContext;

            public Emitter(SourceGenerationSpec generationSpec, in PartitionKeyMapperSourceGenerationContext sourceGenerationContext)
            {
                this.generationSpec = generationSpec;
                this.sourceGenerationContext = sourceGenerationContext;
            }

            public void Emit()
            {
                string @namespace = generationSpec.ContextTypeSymbol.ContainingNamespace.ToString();
                string contextName = generationSpec.ContextTypeSymbol.Name;
                string classDeclaration = generationSpec.ClassDeclaration!;
                var usings = new HashSet<string>(generationSpec.Usings)
                {
                    "using Microsoft.Azure.Cosmos;",
                    "using System;",
                    "using System.Collections.Generic;",
                    "using NServiceBus;",
                    "using NServiceBus.Persistence.CosmosDB;"
                };

                StringBuilder sb = new(@"// <auto-generated/>");
                sb.AppendLine();
                foreach (var @using in usings)
                {
                    sb.AppendLine(@using);
                }

                sb.Append(@$"
namespace {@namespace}
{{");
                sb.Append($@"
    {classDeclaration}
    {{
");
                GenerateTryMapMessageCoreIfNecessary(sb);
                sb.AppendLine();

                sb.Append($@"
    }}");
                sb.Append($@"
}}");
                sourceGenerationContext.AddSource($"{contextName}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
            }

            void GenerateTryMapMessageCoreIfNecessary(StringBuilder sb)
            {
                if (generationSpec.TypeNames.Count == 0)
                {
                    return;
                }

                sb.Append($@"
        protected override bool TryExtractFromMessageCore(object message, out PartitionKey? partitionKey, out ContainerInformation? containerInformation)
        {{");
                sb.Append($@"
            partitionKey = null;
            containerInformation = null;");
                foreach (var typeName in generationSpec.TypeNames)
                {
                    // if (message is TType)
                    // {
                    //     var (invoker, container, state) = Extractors[typeof(TType)];
                    //     partitionKey = invoker(message, state);
                    //     containerInformation = container;
                    //     return true;
                    // }
                    sb.Append($@"
            if(message is {typeName})
            {{
                var (invoker, container, state) = Extractors[typeof({typeName})];
                partitionKey = invoker(message, state);
                containerInformation = container;
                return true;
            }}");
                }

                sb.Append($@"
            return false;");
                sb.Append($@"
        }}");
            }
        }
    }
}