namespace NServiceBus.Persistence.CosmosDB.SourceGenerator
{
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Microsoft.CodeAnalysis.Text;

    [Generator]
    public sealed partial class PartitionKeyMappingSourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new SyntaxContextReceiver());
        }

        sealed class SyntaxContextReceiver : ISyntaxContextReceiver
        {
            public List<ClassDeclarationSyntax>? ClassDeclarationSyntaxList { get; private set; }

            public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
            {
                if (Parser.IsSyntaxTargetForGeneration(context.Node))
                {
                    (ClassDeclarationSyntaxList ??= new List<ClassDeclarationSyntax>()).Add((ClassDeclarationSyntax)context.Node);
                }
            }
        }

        public void Execute(GeneratorExecutionContext context)
        {
            // Short circuit if this is a different syntax receiver
            if (context.SyntaxContextReceiver is not SyntaxContextReceiver receiver || receiver.ClassDeclarationSyntaxList == null)
            {
                // nothing to do yet
                return;
            }

            Parser parser = new(context.Compilation);
            SourceGenerationSpec? spec = parser.GetGenerationSpec(receiver.ClassDeclarationSyntaxList);
            if (spec != null)
            {
                // var emitter = new Emitter(context, spec);
                // emitter.Emit();
            }

            var source =
$@"// <autogenerated/>

class PartitionKeyMapper
{{
    
}}";
            context.AddSource("NServiceBus__PartitionKeyMapper", SourceText.From(source, Encoding.UTF8));
        }
    }
}